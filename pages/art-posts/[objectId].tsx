/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import { NextPage } from "next";
import { useRouter } from "next/dist/client/router";
import { useEffect, useState } from "react";
import ArtDescription from "../../components/ArtDescription";
import Frame from "../../components/Frame";
import Header from "../../components/Header";
import { Notification } from "../../components/Notification";
import styles from "../../styles/pages/art-post.module.css";
import { getArtObject } from "../../utils/api";
import { ArtObject } from "../../utils/types";
import { EmptyState } from "../../components/EmptyState";

const ArtPost: NextPage = () => {
  const router = useRouter();
  const objectId = router.query.objectId;
  const [artObject, setArtObject] = useState<ArtObject>();
  const [error, setError] = useState<any>();
  const [isLoading, setIsLoading] = useState(false);
  const [imageDimensions, setImageDimensions] = useState({
    height: 800,
    width: 768,
  });
  const frameDimensions = {
    height: imageDimensions.height + 200,
    width: imageDimensions.width + 200,
  };

  useEffect(() => {
    async function fetchArtObject() {
      if (objectId && objectId !== "undefined") {
        setIsLoading(true);
        try {
          const id = parseInt(objectId as string);
          const artObject = await getArtObject(id);
          setArtObject(artObject);
        } catch (error) {
          setError((error as Error).message ?? "Couldn't fetch art object.");
        }
        setIsLoading(false);
      }
    }
    fetchArtObject();
  }, [objectId]);

  useEffect(() => {
    const image = new Image();
    image.onload = function () {
      setImageDimensions({
        height: image.height / 1.25,
        width: image.width / 1.25,
      });
    };
    image.src = artObject?.imageSource ?? "";
  }, [artObject?.imageSource]);

  return (
    <div className={styles.art_post}>
      <Head>
        <title>Art Crawl</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {/* <html lang="en"></html> */}
      </Head>
      <Header />
      {error && (
        <Notification
          isError={true}
          message={error}
          onClose={() => setError(null)}
        />
      )}
      <div className={styles.post_items}>
        {artObject?.imageSource && (
          <Frame dimensions={frameDimensions}>
            <img
              src={artObject.imageSource}
              alt={artObject.title}
              height={imageDimensions.height}
              width={imageDimensions.width}
            />
          </Frame>
        )}
        {artObject && !isLoading && !error && (
          <div className={styles.description_info}>
            <ArtDescription artObject={artObject} />
          </div>
        )}
        {!artObject && !isLoading && (
          <EmptyState
            message="No art object found."
            secondaryMessage="Please try refreshing the page, or return to Home."
          />
        )}
      </div>
      {isLoading && <div className={styles.loader}></div>}
    </div>
  );
};

export default ArtPost;

/*
export const getStaticProps = async (context) => {
  const objectId = context.params.objectId;
  if (objectId && objectId !== "undefined") {
    console.log(objectId);
    try {
      //Had to export this independently from ArtPost
      const response = await fetch(
        `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectId}`
        //"https://collectionapi.metmuseum.org/public/collection/v1/objects/446532"
      );
      const output = await response.json();
      const artObject: APIArtObject = output;
      //console.log(artObject);
      return { props: convertArtObject(artObject) }; //Had to nest the returned object within 'props' property
    } catch (error) {
      console.log(error);
    }
  }
  return { props: {} };
};

export const getStaticPaths = async () => {
  // let listOfObjectIDs: number[] = [];
  // try {
  //   const response = await fetch(
  //     "https://collectionapi.metmuseum.org/public/collection/v1/objects"
  //     //`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true`
  //   );
  //   const data = await response.json();
  //   listOfObjectIDs = data.objectIDs;
  // } catch (error) {
  //   console.log("paths", error);
  // }

  return {
    fallback: "blocking",
    // paths: [`/art-posts/436532`], //TODO: grab list of valid object IDs and use that for path
    paths: [{ params: { objectId: "436532" } }],
    //paths: listOfObjectIDs.map((objectID) => `/art-posts/${objectID}`),
  };
};
*/
