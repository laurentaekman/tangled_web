import type { NextPage } from "next";
import Head from "next/head";
import { useContext, useEffect, useState } from "react";
import styles from "../../styles/Home.module.css";
import ArtObjectCard from "../../components/ArtObjectCard";
import ObjectsContext from "../../context/objects-context";
import Header from "../../components/Header";
import { getArtObjects } from "../../utils/api";
import { ArtObject } from "../../utils/types";
import { useInfiniteScroll } from "../../hooks/use-infinite-scroll";

/*
TODO:
- Make pagination loading less excessive (only load a FEW elements, rather than hundreds)
- Make loader less erratic when it displays at bottom of page
*/

const Home: NextPage = () => {
  const [artObjectIds, setArtObjectIds] = useState<number[]>([]);
  const [artObjects, setArtObjects] = useState<ArtObject[]>([]);

  const [currentPage, setCurrentPage] = useState(1);
  const [isLoading, setIsLoading] = useState(false);

  const objectsContext = useContext(ObjectsContext);
  const allAvailableObjectIds = objectsContext.objectIds;
  const itemsPerPage = 3;

  const options = {
    root: null,
    rootMargin: "0px",
    threshold: 0.5,
  };

  const handleNextPageCall = () => {
    const nextEndIndex = (currentPage + 1) * itemsPerPage;
    setCurrentPage(currentPage + 1);

    if (artObjects.length < nextEndIndex) {
      const allObjectIds = allAvailableObjectIds.slice(0, nextEndIndex);
      setArtObjectIds(allObjectIds);
    }
  };
  const scrollRef = useInfiniteScroll(handleNextPageCall, options);

  useEffect(() => {
    if (currentPage === 1 && allAvailableObjectIds.length > 0) {
      setArtObjectIds((prevArray) =>
        prevArray.concat(
          allAvailableObjectIds.slice(0, currentPage * itemsPerPage)
        )
      );
    }
  }, [currentPage, allAvailableObjectIds]);

  useEffect(() => {
    const startIndex = currentPage * itemsPerPage - itemsPerPage;
    const endIndex = startIndex + itemsPerPage;

    const getNewArtObjects = async () => {
      setIsLoading(true);
      const newObjectIds = artObjectIds.slice(startIndex, endIndex);
      const newObjects: ArtObject[] = await getArtObjects(newObjectIds);
      setArtObjects((prevArray) => prevArray.concat(newObjects));

      setIsLoading(false);
    };

    if (artObjectIds.length > 0) {
      getNewArtObjects();
    }
  }, [artObjectIds, currentPage]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Tangled Web</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Header />
        <h2>Get started by clicking one of the art pieces below.</h2>

        {artObjects.length > 0 && artObjectIds.length && (
          <div className={styles.cards}>
            {artObjects.length > 0 &&
              artObjects.map((object) => (
                <ArtObjectCard artObject={object} key={object.id} />
              ))}
          </div>
        )}
        {isLoading && <div className={styles.loader}></div>}
      </main>
      {artObjects.length < allAvailableObjectIds.length && (
        <div ref={scrollRef} className={styles.loader}></div>
      )}
    </div>
  );
};

export default Home;
