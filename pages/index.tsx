import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useContext, useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import ArtObjectCard from "../components/ArtObjectCard";
import ObjectsContext from "../context/objects-context";
import Header from "../components/Header";

/*
TODO:
- Restrict options based on whether they have images or not
- Create better layout for initial options
*/
const Home: NextPage = () => {
  const initialObjectIDArray: number[] = [];
  const initialObjectArray: any[] = [];

  const [startingObjectIDs, setStartingObjectIDs] =
    useState(initialObjectIDArray);
  const [startingObjects, setStartingObjects] = useState(initialObjectArray);
  const [isLoading, setIsLoading] = useState(false);
  const objectsContext = useContext(ObjectsContext);

  useEffect(() => {
    setIsLoading(true);
    async function getRandomObjectIDs() {
      // const response = await fetch(
      //   "https://collectionapi.metmuseum.org/public/collection/v1/objects"
      // );
      // const data = await response.json();
      const data = objectsContext.objectIDs;
      const randomObjectIDs: number[] = [];
      for (let i = 0; i < 3; i++) {
        let randomIndex = Math.floor(Math.random() * (data.length - 0 + 1));
        randomObjectIDs.push(data[randomIndex]);
      }
      setStartingObjectIDs(randomObjectIDs);
    }
    if (objectsContext.objectIDs.length > 0) {
      getRandomObjectIDs();
    }
    //setIsLoading(false);
  }, [objectsContext]);

  useEffect(() => {
    async function getArtObjects(objectIDs: number[]) {
      setIsLoading(true);
      const objectPromises = objectIDs.map(async (objectID) => {
        const response = await fetch(
          `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`
        );
        const data = await response.json();
        return data;
      });
      const objects = await Promise.all(objectPromises);
      setStartingObjects(objects);
      setIsLoading(false);
    }
    if (startingObjectIDs.length > 0) {
      getArtObjects(startingObjectIDs);
    } else {
      setIsLoading(true);
    }
  }, [startingObjectIDs]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Tangled Web</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Header />
        {/* <h1 className={styles.title}>Tangled Web (Art Edition)</h1> */}
        <h2>Get started by clicking one of the art pieces below.</h2>
        <div>
          Or click{" "}
          <Link href="/art-posts/436532">
            <a>this page!</a>
          </Link>
        </div>

        {startingObjects.length > 0 &&
          startingObjectIDs.length &&
          !isLoading &&
          startingObjects.map((object) => {
            return <ArtObjectCard artObject={object} key={object.objectID} />;
          })}
        {isLoading && <div className={styles.loader}></div>}
      </main>
    </div>
  );
};

export default Home;
